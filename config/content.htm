<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>2a第10組網站:<a href="https://mdecd2025.github.io/2a-ag10">https://mdecd2025.github.io/2a-ag10</a></p>
<p>2a第10組倉儲:<a href="https://github.com/mdecd2025/2a-ag10">https://github.com/mdecd2025/2a-ag10</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>Tasks</h1>
<h2>task2</h2>
<h3>W3</h3>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/113a3d7e19b36a7672a136f3731ef07b095adeef/list_2a.py">列出 2a 學員作業網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/29173e8b73ad422fd7c44bcd93658a3579d63633/list_stage_3.py">列出 2b 學員作業網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2a_group.py">列出 2a 分組網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2b_group.py">列出 2b 分組網站與倉儲連結</a></p>
<hr/>
<p><span>請列出各組目前尚未納入分組的學員名單</span></p>
<p><button id="add1to100">1 add to 100</button></p>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc, html

# 用來顯示未分組的學員
def display_unassigned_members(url):
    # 讀取檔案中的學員資料
    data = open(url).readlines()

    # 篩選出有效資料（跳過標題）
    all_stud = data[1:]

    # 找出尚未分組的學員，假設分組的學員在 github 帳號或學號中有某個特徵
    unassigned_stud = []

    for i in all_stud:
        stud = i.split("\t")
        stud_num = stud[0]
        github = stud[1]

        # 假設如果學員的 github 帳號或學號為空，代表未分組
        if not github or github.strip() == "":  # 假設空的帳號代表未分組
            unassigned_stud.append((stud_num, github))

    # 顯示未分組學員
    brython_div1 = document["brython_div1"]
    brython_div1 <= html.H2("尚未分組的學員")

    count = 0
    for stud_num, github in unassigned_stud:
        count += 1
        brython_div1 <= str(count) + ". " + html.A(str(stud_num), href="https://mdecd2025.github.io/hw-" + str(github) if github else "#")
        brython_div1 <= " | " + html.A("repo", href="https://github.com/mdecd2025/hw-" + str(github) if github else "#")
        brython_div1 <= html.BR()

# 顯示尚未分組的學員，針對 2a 分組
display_unassigned_members("https://mde.tw/list/2a.txt")

# 顯示尚未分組的學員，針對 2b 分組
display_unassigned_members("https://mde.tw/list/2b.txt")
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><!-- editor1 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 用來顯示未分組的學員
def display_unassigned_members(url):
    # 讀取檔案中的學員資料
    data = open(url).readlines()

    # 篩選出有效資料（跳過標題）
    all_stud = data[1:]

    # 找出尚未分組的學員，假設分組的學員在 github 帳號或學號中有某個特徵
    unassigned_stud = []

    for i in all_stud:
        stud = i.split("\t")
        stud_num = stud[0]
        github = stud[1]

        # 假設如果學員的 github 帳號或學號為空，代表未分組
        if not github or github.strip() == "":  # 假設空的帳號代表未分組
            unassigned_stud.append((stud_num, github))

    # 顯示未分組學員
    brython_div1 = document["brython_div1"]
    brython_div1 &lt;= html.H2("尚未分組的學員")

    count = 0
    for stud_num, github in unassigned_stud:
        count += 1
        brython_div1 &lt;= str(count) + ". " + html.A(str(stud_num), href="https://mdecd2025.github.io/hw-" + str(github) if github else "#")
        brython_div1 &lt;= " | " + html.A("repo", href="https://github.com/mdecd2025/hw-" + str(github) if github else "#")
        brython_div1 &lt;= html.BR()
    </pre>
</div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p><!-- 程式執行 ouput 區 --></p>
<div><textarea autocomplete="off" id="kw_console1"></textarea></div>
<div> </div>
<h2>task3</h2>
<p><span>使用 Solvespace 建立平面四連桿系統零組件 (HW2)</span></p>
<h2>task5</h2>
<p>1. Webots介紹：Webots 是一款開源的機器人仿真軟體，提供了強大的圖形介面，幫助用戶創建和模擬各種機器人及其環境。用戶可以設計機器人、建立仿真環境、進行測試，並進行機器人程式設計，支援多種機器人及感測器模組。</p>
<p>2. <br/>重要單字與用法：<br/>Simulation (名詞)：指模擬過程，表示在虛擬環境中重現現實世界的情境。例子："robot simulation"（機器人模擬）。<br/>Controller (名詞)：控制機器人行為的程式。例子："The robot controller is written in Python."（機器人的控制器是用 Python 編寫的）。<br/>Environment (名詞)：機器人運行的虛擬或物理世界。例子："The environment can contain various objects."（該環境可以包含各種物體）</p>
<p><br/>文法說明：<br/>Simulation：作為名詞，通常與動詞 "perform" 或 "create" 連用。例如 "perform a simulation"（進行模擬）或 "create a simulation"（創建模擬）。<br/>Controller：在句中多用作主語或賓語，如 "is written"（被寫成）表示被動語態，突出程式本身而非編寫者。<br/>Environment：通常用來表示場所或範圍，如 "the environment can contain"（環境可以包含），這是一種表示能力或可能性的句型，使用 "can" 表示可行或有可能的動作。</p>
<p>3. </p>
<p>Webots is an open-source robot simulation software that allows users to create 3D virtual worlds with physical properties for testing different types of robots, such as wheeled, legged, or flying robots. It supports various sensors and actuators. Webots is widely used in academic research, education, and industries. It also allows transferring simulations to real robots, such as e-puck or Nao. The platform supports programming in multiple languages like C, C++, Python, Java, and MATLAB.</p>
<p>For more details, visit the Webots Introduction.</p>
<p></p>
<p>4. </p>
<p>重要單字與解釋：<br/>Open-source (形容詞)：開源的，指軟體源碼公開，允許用戶自由修改和分發。</p>
<p>用法：在句中通常用來描述軟體的開放性，如 "Webots is an open-source robot simulation software."<br/>Simulation (名詞)：模擬，指用電腦創建的虛擬環境來重現現實世界情境。</p>
<p>用法：例如 "robot simulation"（機器人模擬）描述模擬過程。<br/>Actuators (名詞)：執行器，指機器人內部用於執行物理動作的裝置。</p>
<p>用法：如 "supports various sensors and actuators"（支援各種感測器和執行器）中，表示 Webots 平台的功能。<br/>Interface (名詞)：介面，指使兩個系統或裝置相互連接的界面。</p>
<p>用法：例如 "Webots also allows transferring simulations to real robots"（Webots 也允許將模擬轉移到真實機器人），強調與實際機器人之間的連接。</p>
<p><br/>句子文法解釋：<br/>Open-source：用來描述 Webots 軟體的性質，指其是開放源碼的。<br/>Simulation：作為名詞，與動詞 "create"（創建）或 "perform"（執行）搭配使用，表示模擬過程或操作。<br/>Actuators：在句中作為名詞，表達 Webots 支援的硬體元件之一。<br/>Interface：表示系統或工具間的連接方式，這裡強調了虛擬與真實機器人之間的連結。</p>
<p></p>
<p>5. 建立場景：<br/>1.<span>)</span>開啟 Webots，選擇 File &gt; New World 來創建新場景。<br/>2.<span>)</span>使用左側工具欄中的 Add Node 按鈕，將機器人或物體加入到場景中。<br/>3.<span>)</span>配置機器人或物體的位置、大小和屬性。可使用 View 工具來查看場景的不同角度。<br/>4.<span>)</span>為機器人設置控制器和感測器，確保其能夠進行所需的運作。<br/>5.)保存場景並按 Run 按鈕進行測試。</p>
<p>注意：確保每個元素的物理參數配置正確，並測試機器人的行為以確保其運行如預期。</p>
<p>6. 手動建立場景：<br/>1.)開啟 Webots，選擇“File” &gt; “New World”來創建新的場景。<br/><span>2.)</span>從左側選擇“Add Node”來添加不同的場景元素（如地面、障礙物、機器人等）。<br/><span>3.)</span>根據需求調整機器人的參數，並設定所需的感測器。<br/><span>4.)</span>最後保存並運行場景。</p>
<p>*注意要點：在創建過程中，確保每個元素正確配置（如機器人的動作、感測器的範圍等），並對場景進行測試。</p>
<h1>Homeworks</h1>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>